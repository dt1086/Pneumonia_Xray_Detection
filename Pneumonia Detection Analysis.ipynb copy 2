{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pneumonia Detection Analysis - Image Classification with Deep Learning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Overview\n",
    "\n",
    "Pneumonia is the single largest cause of death in children worldwide.\n",
    "\n",
    "Every year, it kills an estimated 1.4 million children under the age of five years, accounting for 18% of all deaths of children under five years old worldwide.\n",
    "\n",
    "### Problem\n",
    "Can we build an image classification model to detect if a child has pneumonia given an X-Ray of their lungs?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# !pip install pillow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#importing libraries\n",
    "from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\n",
    "import numpy as np\n",
    "import os\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "#random seed to get reproducable results\n",
    "from numpy.random import seed\n",
    "seed(7)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Separating the images by training/validation/test and seeing the counts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 1341 normal training images\n",
      "There are 3875 pneumonia training images\n",
      "There are 234 normal test images\n",
      "There are 390 pneumonia test images\n",
      "There are 8 normal val images\n",
      "There are 8 pneumonia val images\n"
     ]
    }
   ],
   "source": [
    "imgs_train_normal = [file for file in os.listdir('Data/train/NORMAL') if file.endswith('.jpeg')]\n",
    "print('There are', len(imgs_train_normal), 'normal training images')\n",
    "\n",
    "imgs_train_pneumonia = [file for file in os.listdir('Data/train/PNEUMONIA') if file.endswith('.jpeg')]\n",
    "print('There are', len(imgs_train_pneumonia), 'pneumonia training images')\n",
    "\n",
    "imgs_test_normal = [file for file in os.listdir('Data/test/NORMAL') if file.endswith('.jpeg')]\n",
    "print('There are', len(imgs_test_normal), 'normal test images')\n",
    "\n",
    "imgs_test_pneumonia = [file for file in os.listdir('Data/test/PNEUMONIA') if file.endswith('.jpeg')]\n",
    "print('There are', len(imgs_test_pneumonia), 'pneumonia test images')\n",
    "\n",
    "imgs_val_normal = [file for file in os.listdir('Data/val/NORMAL') if file.endswith('.jpeg')]\n",
    "print('There are', len(imgs_val_normal), 'normal val images')\n",
    "\n",
    "imgs_val_pneumonia = [file for file in os.listdir('Data/val/PNEUMONIA') if file.endswith('.jpeg')]\n",
    "print('There are', len(imgs_val_pneumonia), 'pneumonia val images')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualizing how many images in a bar graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.barplot(x = ['Normal', 'Pneumonia'],\n",
    "                 y = [len(imgs_train_normal), len(imgs_train_pneumonia)]);\n",
    "ax.set_title(\"Number of X-Ray Images: Training Set\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.barplot(x = ['Normal', 'Pneumonia'],\n",
    "                 y = [len(imgs_val_normal), len(imgs_val_pneumonia)]);\n",
    "ax.set_title(\"Number of X-Ray Images: Validation Set\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.barplot(x = ['Normal', 'Pneumonia'],\n",
    "                 y = [len(imgs_test_normal), len(imgs_test_pneumonia)]);\n",
    "ax.set_title(\"Number of X-Ray Images: Test Set\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load data from directory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 5216 images belonging to 2 classes.\n",
      "Found 624 images belonging to 2 classes.\n",
      "Found 16 images belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "train_data_dir = 'Data/train'\n",
    "test_data_dir = 'Data/test'\n",
    "val_data_dir = 'Data/val'\n",
    "\n",
    "# Get all the data in the directory data, standardize and reshape them\n",
    "train_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(\n",
    "        train_data_dir, \n",
    "        target_size=(128, 128), batch_size=5216, class_mode='binary')\n",
    "\n",
    "test_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(\n",
    "        test_data_dir, \n",
    "        target_size=(128, 128), batch_size=624, class_mode='binary')\n",
    "\n",
    "val_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(\n",
    "        val_data_dir, \n",
    "        target_size=(128, 128), batch_size=16, class_mode='binary')\n",
    "\n",
    "# Create the datasets\n",
    "train_images, train_labels = next(train_generator)\n",
    "test_images, test_labels = next(test_generator)\n",
    "val_images, val_labels = next(val_generator)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's preview which class corresponds with Normal/Pneumonia."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'NORMAL': 0, 'PNEUMONIA': 1}"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_generator.class_indices"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's explore out dataset size/shape."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of training samples: 5216\n",
      "Number of testing samples: 624\n",
      "Number of validation samples: 16\n",
      "train_images shape: (5216, 128, 128, 3)\n",
      "train_labels shape: (5216,)\n",
      "test_images shape: (624, 128, 128, 3)\n",
      "test_labels shape: (624,)\n",
      "val_images shape: (16, 128, 128, 3)\n",
      "val_labels shape: (16,)\n"
     ]
    }
   ],
   "source": [
    "# Explore dataset\n",
    "m_train = train_images.shape[0]\n",
    "num_px = train_images.shape[1]\n",
    "m_test = test_images.shape[0]\n",
    "m_val = val_images.shape[0]\n",
    "\n",
    "print (\"Number of training samples: \" + str(m_train))\n",
    "print (\"Number of testing samples: \" + str(m_test))\n",
    "print (\"Number of validation samples: \" + str(m_val))\n",
    "print (\"train_images shape: \" + str(train_images.shape))\n",
    "print (\"train_labels shape: \" + str(train_labels.shape))\n",
    "print (\"test_images shape: \" + str(test_images.shape))\n",
    "print (\"test_labels shape: \" + str(test_labels.shape))\n",
    "print (\"val_images shape: \" + str(val_images.shape))\n",
    "print (\"val_labels shape: \" + str(val_labels.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reshape our images for processing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5216, 49152)\n",
      "(624, 49152)\n",
      "(16, 49152)\n"
     ]
    }
   ],
   "source": [
    "train_img = train_images.reshape(train_images.shape[0], -1)\n",
    "test_img = test_images.reshape(test_images.shape[0], -1)\n",
    "val_img = val_images.reshape(val_images.shape[0], -1)\n",
    "\n",
    "print(train_img.shape)\n",
    "print(test_img.shape)\n",
    "print(val_img.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Preview our first 4 labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 1., 1.], dtype=float32)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_labels[:4]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot our first 4 X-Rays."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplots(figsize=(10,10))\n",
    "\n",
    "for n in range(4):\n",
    "    ax = plt.subplot(2,2,n+1)\n",
    "    plt.imshow((train_images[n]))\n",
    "    if train_labels[n] == 1:\n",
    "        plt.title(\"PNEUMONIA\")\n",
    "    else:\n",
    "        plt.title(\"NORMAL\")\n",
    "    plt.axis(\"off\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "#additional imports for modeling\n",
    "from keras import models\n",
    "from keras import layers\n",
    "import keras\n",
    "\n",
    "from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Conv2D, Flatten"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modeling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model 1 - Densely Connected Network (baseline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#instatiate model\n",
    "model_1 = models.Sequential()\n",
    "\n",
    "#add layers\n",
    "model_1.add(layers.Dense(20, activation='relu', input_shape=(49152,))) # 2 hidden layers\n",
    "model_1.add(layers.Dense(7, activation='relu'))\n",
    "model_1.add(layers.Dense(5, activation='relu'))\n",
    "model_1.add(layers.Dense(1, activation='sigmoid'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "163/163 [==============================] - 31s 188ms/step - loss: 0.6572 - accuracy: 0.7402 - val_loss: 0.7063 - val_accuracy: 0.5000\n",
      "Epoch 2/50\n",
      "163/163 [==============================] - 5s 32ms/step - loss: 0.6106 - accuracy: 0.7429 - val_loss: 0.7299 - val_accuracy: 0.5000\n",
      "Epoch 3/50\n",
      "163/163 [==============================] - 3s 19ms/step - loss: 0.5896 - accuracy: 0.7429 - val_loss: 0.7525 - val_accuracy: 0.5000\n",
      "Epoch 4/50\n",
      "163/163 [==============================] - 3s 16ms/step - loss: 0.5798 - accuracy: 0.7429 - val_loss: 0.7708 - val_accuracy: 0.5000\n",
      "Epoch 5/50\n",
      "163/163 [==============================] - 2s 15ms/step - loss: 0.5750 - accuracy: 0.7429 - val_loss: 0.7856 - val_accuracy: 0.5000\n",
      "Epoch 6/50\n",
      "163/163 [==============================] - 2s 14ms/step - loss: 0.5726 - accuracy: 0.7429 - val_loss: 0.7965 - val_accuracy: 0.5000\n",
      "Epoch 7/50\n",
      "163/163 [==============================] - 3s 16ms/step - loss: 0.5714 - accuracy: 0.7429 - val_loss: 0.8048 - val_accuracy: 0.5000\n",
      "Epoch 8/50\n",
      "163/163 [==============================] - 3s 17ms/step - loss: 0.5707 - accuracy: 0.7429 - val_loss: 0.8107 - val_accuracy: 0.5000\n",
      "Epoch 9/50\n",
      "163/163 [==============================] - 3s 18ms/step - loss: 0.5704 - accuracy: 0.7429 - val_loss: 0.8155 - val_accuracy: 0.5000\n",
      "Epoch 10/50\n",
      "163/163 [==============================] - 2s 15ms/step - loss: 0.5702 - accuracy: 0.7429 - val_loss: 0.8189 - val_accuracy: 0.5000\n",
      "Epoch 11/50\n",
      "163/163 [==============================] - 2s 15ms/step - loss: 0.5701 - accuracy: 0.7429 - val_loss: 0.8214 - val_accuracy: 0.5000\n",
      "Epoch 12/50\n",
      "163/163 [==============================] - 2s 15ms/step - loss: 0.5701 - accuracy: 0.7429 - val_loss: 0.8231 - val_accuracy: 0.5000\n",
      "Epoch 13/50\n",
      "163/163 [==============================] - 2s 15ms/step - loss: 0.5701 - accuracy: 0.7429 - val_loss: 0.8241 - val_accuracy: 0.5000\n",
      "Epoch 14/50\n",
      "163/163 [==============================] - 3s 15ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8257 - val_accuracy: 0.5000\n",
      "Epoch 15/50\n",
      "163/163 [==============================] - 3s 16ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8262 - val_accuracy: 0.5000\n",
      "Epoch 16/50\n",
      "163/163 [==============================] - 2s 15ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8264 - val_accuracy: 0.5000\n",
      "Epoch 17/50\n",
      "163/163 [==============================] - 3s 19ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8271 - val_accuracy: 0.5000\n",
      "Epoch 18/50\n",
      "163/163 [==============================] - 3s 15ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8274 - val_accuracy: 0.5000\n",
      "Epoch 19/50\n",
      "163/163 [==============================] - 2s 13ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8276 - val_accuracy: 0.5000\n",
      "Epoch 20/50\n",
      "163/163 [==============================] - 3s 16ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8275 - val_accuracy: 0.5000\n",
      "Epoch 21/50\n",
      "163/163 [==============================] - 2s 12ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8275 - val_accuracy: 0.5000\n",
      "Epoch 22/50\n",
      "163/163 [==============================] - 2s 15ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8274 - val_accuracy: 0.5000\n",
      "Epoch 23/50\n",
      "163/163 [==============================] - 3s 17ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8273 - val_accuracy: 0.5000\n",
      "Epoch 24/50\n",
      "163/163 [==============================] - 4s 22ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8276 - val_accuracy: 0.5000\n",
      "Epoch 25/50\n",
      "163/163 [==============================] - 3s 20ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8276 - val_accuracy: 0.5000\n",
      "Epoch 26/50\n",
      "163/163 [==============================] - 3s 18ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8275 - val_accuracy: 0.5000\n",
      "Epoch 27/50\n",
      "163/163 [==============================] - 3s 16ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8275 - val_accuracy: 0.5000\n",
      "Epoch 28/50\n",
      "163/163 [==============================] - 4s 24ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8279 - val_accuracy: 0.5000\n",
      "Epoch 29/50\n",
      "163/163 [==============================] - 3s 18ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8278 - val_accuracy: 0.5000\n",
      "Epoch 30/50\n",
      "163/163 [==============================] - 3s 20ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8279 - val_accuracy: 0.5000\n",
      "Epoch 31/50\n",
      "163/163 [==============================] - 4s 26ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8283 - val_accuracy: 0.5000\n",
      "Epoch 32/50\n",
      "163/163 [==============================] - 4s 27ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8282 - val_accuracy: 0.5000\n",
      "Epoch 33/50\n",
      "163/163 [==============================] - 3s 18ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8284 - val_accuracy: 0.5000\n",
      "Epoch 34/50\n",
      "163/163 [==============================] - 3s 20ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8283 - val_accuracy: 0.5000\n",
      "Epoch 35/50\n",
      "163/163 [==============================] - 3s 21ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8282 - val_accuracy: 0.5000\n",
      "Epoch 36/50\n",
      "163/163 [==============================] - 2s 14ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8278 - val_accuracy: 0.5000\n",
      "Epoch 37/50\n",
      "163/163 [==============================] - 2s 14ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8279 - val_accuracy: 0.5000\n",
      "Epoch 38/50\n",
      "163/163 [==============================] - 2s 14ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8277 - val_accuracy: 0.5000\n",
      "Epoch 39/50\n",
      "163/163 [==============================] - 2s 14ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8276 - val_accuracy: 0.5000\n",
      "Epoch 40/50\n",
      "163/163 [==============================] - 2s 14ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8278 - val_accuracy: 0.5000\n",
      "Epoch 41/50\n",
      "163/163 [==============================] - 3s 16ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8278 - val_accuracy: 0.5000\n",
      "Epoch 42/50\n",
      "163/163 [==============================] - 3s 15ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8278 - val_accuracy: 0.5000\n",
      "Epoch 43/50\n",
      "163/163 [==============================] - 2s 13ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8275 - val_accuracy: 0.5000\n",
      "Epoch 44/50\n",
      "163/163 [==============================] - 2s 13ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8275 - val_accuracy: 0.5000\n",
      "Epoch 45/50\n",
      "163/163 [==============================] - 2s 13ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8278 - val_accuracy: 0.5000\n",
      "Epoch 46/50\n",
      "163/163 [==============================] - 3s 19ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8274 - val_accuracy: 0.5000\n",
      "Epoch 47/50\n",
      "163/163 [==============================] - 3s 15ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8278 - val_accuracy: 0.5000\n",
      "Epoch 48/50\n",
      "163/163 [==============================] - 2s 10ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8278 - val_accuracy: 0.5000\n",
      "Epoch 49/50\n",
      "163/163 [==============================] - 2s 11ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8280 - val_accuracy: 0.5000\n",
      "Epoch 50/50\n",
      "163/163 [==============================] - 2s 14ms/step - loss: 0.5700 - accuracy: 0.7429 - val_loss: 0.8280 - val_accuracy: 0.5000\n"
     ]
    }
   ],
   "source": [
    "#compile layers\n",
    "model_1.compile(optimizer='sgd',\n",
    "              loss='binary_crossentropy',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "#fitting model\n",
    "history = model_1.fit(train_img,\n",
    "                    train_labels,\n",
    "                    epochs=50,\n",
    "                    batch_size=32,\n",
    "                    validation_data=(val_img, val_labels))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Look at test/train results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "163/163 [==============================] - 1s 8ms/step - loss: 0.5700 - accuracy: 0.7429\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.5699950456619263, 0.7429064512252808]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_train = model_1.evaluate(train_img, train_labels)\n",
    "results_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20/20 [==============================] - 0s 20ms/step - loss: 0.6952 - accuracy: 0.6250\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.6952418088912964, 0.625]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_test = model_1.evaluate(test_img, test_labels)\n",
    "results_test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "74% on the training set and 62.5% on the testing set."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's look at which epochs were the best performing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_acc(history, ax = None, xlabel = 'Epoch #'):\n",
    "    \n",
    "    history = history.history\n",
    "    history.update({'epoch':list(range(len(history['val_accuracy'])))})\n",
    "    history = pd.DataFrame.from_dict(history)\n",
    "\n",
    "    best_epoch = history.sort_values(by = 'val_accuracy', ascending = False).iloc[0]['epoch']\n",
    "\n",
    "    if not ax:\n",
    "      f, ax = plt.subplots(1,1)\n",
    "    sns.lineplot(x = 'epoch', y = 'val_accuracy', data = history, label = 'Validation', ax = ax)\n",
    "    sns.lineplot(x = 'epoch', y = 'accuracy', data = history, label = 'Training', ax = ax)\n",
    "    ax.axhline(0.5, linestyle = '--',color='red', label = 'Chance')\n",
    "    ax.axvline(x = best_epoch, linestyle = '--', color = 'green', label = 'Best Epoch')  \n",
    "    ax.legend(loc = 1)    \n",
    "    ax.set_ylim([0.4, 1])\n",
    "\n",
    "    ax.set_xlabel(xlabel)\n",
    "    ax.set_ylabel('Accuracy (Fraction)')\n",
    "    \n",
    "    plt.show()\n",
    "    print(\"The highest validation accuracy was\",history.sort_values(by = 'val_accuracy', ascending = False).iloc[0]['val_accuracy'])\n",
    "    print(\"The lowest validation accuracy was\",history.sort_values(by = 'val_accuracy', ascending = True).iloc[0]['val_accuracy'])\n",
    "    \n",
    "\n",
    "def plot_loss(history, ax = None, xlabel = 'Epoch #'):\n",
    "    \n",
    "    history = history.history\n",
    "    history.update({'epoch':list(range(len(history['val_loss'])))})\n",
    "    history = pd.DataFrame.from_dict(history)\n",
    "\n",
    "    best_epoch = history.sort_values(by = 'val_loss', ascending = True).iloc[0]['epoch']\n",
    "\n",
    "    if not ax:\n",
    "      f, ax = plt.subplots(1,1)\n",
    "    sns.lineplot(x = 'epoch', y = 'val_loss', data = history, label = 'Validation', ax = ax)\n",
    "    sns.lineplot(x = 'epoch', y = 'loss', data = history, label = 'Training', ax = ax)\n",
    "    \n",
    "    ax.axvline(x = best_epoch, linestyle = '--', color = 'green', label = 'Best Epoch')  \n",
    "    ax.legend(loc = 1)    \n",
    "    ax.set_ylim([0.1, 1])\n",
    "\n",
    "    ax.set_xlabel(xlabel)\n",
    "    ax.set_ylabel('Loss (Fraction)')\n",
    "    \n",
    "    plt.show()\n",
    "    print(\"The lowest validation loss was\",history.sort_values(by = 'val_loss', ascending = True).iloc[0]['val_loss'])\n",
    "    print(\"The highest validation loss was\",history.sort_values(by = 'val_loss', ascending = False).iloc[0]['val_loss'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The highest validation accuracy was 0.5\n",
      "The lowest validation accuracy was 0.5\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The lowest validation loss was 0.7063047885894775\n",
      "The highest validation loss was 0.828387975692749\n"
     ]
    }
   ],
   "source": [
    "plot_acc(history)\n",
    "plot_loss(history)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Epoch 20 was the best for validation accuracy and epoch 46 had the lowest validation loss."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model 2 - CNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "#instantiate model\n",
    "model_2 = models.Sequential()\n",
    "\n",
    "#add layers\n",
    "model_2.add(layers.Conv2D(32, (3, 3), activation='relu',\n",
    "                        input_shape=(128 ,128,  3)))\n",
    "model_2.add(layers.MaxPooling2D((2, 2)))\n",
    "\n",
    "model_2.add(layers.Conv2D(32, (4, 4), activation='relu'))\n",
    "model_2.add(layers.MaxPooling2D((2, 2)))\n",
    "\n",
    "model_2.add(layers.Conv2D(64, (3, 3), activation='relu'))\n",
    "model_2.add(layers.MaxPooling2D((2, 2)))\n",
    "\n",
    "model_2.add(layers.Flatten())\n",
    "model_2.add(layers.Dense(64, activation='relu'))\n",
    "model_2.add(layers.Dense(1, activation='sigmoid'))\n",
    "\n",
    "#compile layers\n",
    "model_2.compile(loss='binary_crossentropy',\n",
    "              optimizer=\"sgd\",\n",
    "              metrics=['acc'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "163/163 [==============================] - 123s 755ms/step - loss: 0.5346 - acc: 0.7521 - val_loss: 1.0151 - val_acc: 0.5000\n",
      "Epoch 2/30\n",
      "163/163 [==============================] - 124s 763ms/step - loss: 0.3912 - acc: 0.8292 - val_loss: 1.9094 - val_acc: 0.5000\n",
      "Epoch 3/30\n",
      "163/163 [==============================] - 193s 1s/step - loss: 0.2717 - acc: 0.8936 - val_loss: 0.5880 - val_acc: 0.7500\n",
      "Epoch 4/30\n",
      "163/163 [==============================] - 209s 1s/step - loss: 0.2023 - acc: 0.9216 - val_loss: 0.8841 - val_acc: 0.6250\n",
      "Epoch 5/30\n",
      "163/163 [==============================] - 209s 1s/step - loss: 0.1617 - acc: 0.9373 - val_loss: 0.6470 - val_acc: 0.7500\n",
      "Epoch 6/30\n",
      "163/163 [==============================] - 199s 1s/step - loss: 0.1469 - acc: 0.9436 - val_loss: 0.3630 - val_acc: 0.8125\n",
      "Epoch 7/30\n",
      "163/163 [==============================] - 201s 1s/step - loss: 0.1289 - acc: 0.9526 - val_loss: 0.5139 - val_acc: 0.8125\n",
      "Epoch 8/30\n",
      "163/163 [==============================] - 213s 1s/step - loss: 0.1169 - acc: 0.9578 - val_loss: 0.6621 - val_acc: 0.6875\n",
      "Epoch 9/30\n",
      "163/163 [==============================] - 217s 1s/step - loss: 0.1100 - acc: 0.9592 - val_loss: 0.3469 - val_acc: 0.8750\n",
      "Epoch 10/30\n",
      "163/163 [==============================] - 208s 1s/step - loss: 0.1029 - acc: 0.9594 - val_loss: 0.5404 - val_acc: 0.6875\n",
      "Epoch 11/30\n",
      "163/163 [==============================] - 199s 1s/step - loss: 0.0978 - acc: 0.9640 - val_loss: 0.3061 - val_acc: 0.8750\n",
      "Epoch 12/30\n",
      "163/163 [==============================] - 210s 1s/step - loss: 0.0933 - acc: 0.9653 - val_loss: 0.7605 - val_acc: 0.6250\n",
      "Epoch 13/30\n",
      "163/163 [==============================] - 215s 1s/step - loss: 0.0887 - acc: 0.9682 - val_loss: 0.4869 - val_acc: 0.7500\n",
      "Epoch 14/30\n",
      "163/163 [==============================] - 202s 1s/step - loss: 0.0824 - acc: 0.9703 - val_loss: 0.2589 - val_acc: 0.8750\n",
      "Epoch 15/30\n",
      "163/163 [==============================] - 206s 1s/step - loss: 0.0796 - acc: 0.9695 - val_loss: 0.3812 - val_acc: 0.7500\n",
      "Epoch 16/30\n",
      "163/163 [==============================] - 204s 1s/step - loss: 0.0743 - acc: 0.9739 - val_loss: 0.3271 - val_acc: 0.8750\n",
      "Epoch 17/30\n",
      "163/163 [==============================] - 198s 1s/step - loss: 0.0743 - acc: 0.9714 - val_loss: 0.2190 - val_acc: 0.8750\n",
      "Epoch 18/30\n",
      "163/163 [==============================] - 217s 1s/step - loss: 0.0715 - acc: 0.9726 - val_loss: 0.5968 - val_acc: 0.6250\n",
      "Epoch 19/30\n",
      "163/163 [==============================] - 221s 1s/step - loss: 0.0665 - acc: 0.9758 - val_loss: 0.2538 - val_acc: 0.8750\n",
      "Epoch 20/30\n",
      "163/163 [==============================] - 220s 1s/step - loss: 0.0645 - acc: 0.9760 - val_loss: 0.3246 - val_acc: 0.8125\n",
      "Epoch 21/30\n",
      "163/163 [==============================] - 207s 1s/step - loss: 0.0633 - acc: 0.9764 - val_loss: 0.2580 - val_acc: 0.8125\n",
      "Epoch 22/30\n",
      "163/163 [==============================] - 233s 1s/step - loss: 0.0620 - acc: 0.9757 - val_loss: 0.3086 - val_acc: 0.7500\n",
      "Epoch 23/30\n",
      "163/163 [==============================] - 208s 1s/step - loss: 0.0583 - acc: 0.9764 - val_loss: 0.5772 - val_acc: 0.6875\n",
      "Epoch 24/30\n",
      "163/163 [==============================] - 219s 1s/step - loss: 0.0583 - acc: 0.9791 - val_loss: 0.1845 - val_acc: 0.9375\n",
      "Epoch 25/30\n",
      "163/163 [==============================] - 209s 1s/step - loss: 0.0566 - acc: 0.9783 - val_loss: 0.1986 - val_acc: 0.9375\n",
      "Epoch 26/30\n",
      "163/163 [==============================] - 220s 1s/step - loss: 0.0501 - acc: 0.9818 - val_loss: 0.6049 - val_acc: 0.6875\n",
      "Epoch 27/30\n",
      "163/163 [==============================] - 204s 1s/step - loss: 0.0499 - acc: 0.9806 - val_loss: 0.2635 - val_acc: 0.8750\n",
      "Epoch 28/30\n",
      "163/163 [==============================] - 268s 2s/step - loss: 0.0507 - acc: 0.9818 - val_loss: 0.1733 - val_acc: 0.9375\n",
      "Epoch 29/30\n",
      "163/163 [==============================] - 218s 1s/step - loss: 0.0471 - acc: 0.9824 - val_loss: 0.3640 - val_acc: 0.6875\n",
      "Epoch 30/30\n",
      "163/163 [==============================] - 209s 1s/step - loss: 0.0466 - acc: 0.9841 - val_loss: 0.5500 - val_acc: 0.6875\n"
     ]
    }
   ],
   "source": [
    "#fit model\n",
    "history = model_2.fit(train_images,\n",
    "                    train_labels,\n",
    "                    epochs=30,\n",
    "                    batch_size=32,\n",
    "                    validation_data=(val_images, val_labels))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Look at test/train results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "163/163 [==============================] - 52s 320ms/step - loss: 0.0404 - acc: 0.9849\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.040392547845840454, 0.9848542809486389]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_train = model_2.evaluate(train_images, train_labels)\n",
    "results_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20/20 [==============================] - 7s 338ms/step - loss: 1.4749 - acc: 0.7308\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[1.474888801574707, 0.7307692170143127]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_test = model_2.evaluate(test_images, test_labels)\n",
    "results_test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "98% on the training set and 73% on the testing set. An improvement!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Let's Try That Again With Some Regularization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "#instantiate model\n",
    "model_2a = models.Sequential()\n",
    "\n",
    "#add layers\n",
    "model_2a.add(layers.Conv2D(32, (3, 3), activation='relu',\n",
    "                        input_shape=(128 ,128,  3)))\n",
    "model_2a.add(layers.MaxPooling2D((2, 2)))\n",
    "\n",
    "model_2a.add(layers.Conv2D(32, (4, 4), activation='relu'))\n",
    "model_2a.add(layers.MaxPooling2D((2, 2)))\n",
    "\n",
    "model_2a.add(layers.Conv2D(64, (3, 3), activation='relu'))\n",
    "model_2a.add(layers.MaxPooling2D((2, 2)))\n",
    "\n",
    "model_2a.add(layers.Flatten())\n",
    "model_2a.add(layers.Dense(64, activation='relu', kernel_regularizer=keras.regularizers.l2(l2=0.01)))\n",
    "model_2a.add(layers.Dropout(0.2))\n",
    "model_2a.add(layers.Dense(1, activation='sigmoid'))\n",
    "\n",
    "#compile layers\n",
    "model_2a.compile(loss='binary_crossentropy',\n",
    "              optimizer=\"sgd\",\n",
    "              metrics=['acc'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "163/163 [==============================] - 150s 918ms/step - loss: 1.7857 - acc: 0.7416 - val_loss: 2.0139 - val_acc: 0.5000\n",
      "Epoch 2/30\n",
      "163/163 [==============================] - 152s 932ms/step - loss: 1.5980 - acc: 0.8000 - val_loss: 1.9054 - val_acc: 0.6250\n",
      "Epoch 3/30\n",
      "163/163 [==============================] - 118s 724ms/step - loss: 1.4101 - acc: 0.8687 - val_loss: 1.9851 - val_acc: 0.6250\n",
      "Epoch 4/30\n",
      "163/163 [==============================] - 114s 701ms/step - loss: 1.2871 - acc: 0.8940 - val_loss: 1.6053 - val_acc: 0.7500\n",
      "Epoch 5/30\n",
      "163/163 [==============================] - 114s 699ms/step - loss: 1.1769 - acc: 0.9195 - val_loss: 2.0303 - val_acc: 0.5625\n",
      "Epoch 6/30\n",
      "163/163 [==============================] - 117s 718ms/step - loss: 1.0820 - acc: 0.9302 - val_loss: 1.3340 - val_acc: 0.8125\n",
      "Epoch 7/30\n",
      "163/163 [==============================] - 112s 686ms/step - loss: 1.0158 - acc: 0.9360 - val_loss: 1.1655 - val_acc: 0.8750\n",
      "Epoch 8/30\n",
      "163/163 [==============================] - 127s 782ms/step - loss: 0.9529 - acc: 0.9421 - val_loss: 1.4316 - val_acc: 0.6875\n",
      "Epoch 9/30\n",
      "163/163 [==============================] - 120s 738ms/step - loss: 0.8905 - acc: 0.9498 - val_loss: 1.3853 - val_acc: 0.6250\n",
      "Epoch 10/30\n",
      "163/163 [==============================] - 113s 696ms/step - loss: 0.8370 - acc: 0.9515 - val_loss: 0.9748 - val_acc: 0.8750\n",
      "Epoch 11/30\n",
      "163/163 [==============================] - 125s 765ms/step - loss: 0.7824 - acc: 0.9580 - val_loss: 1.0949 - val_acc: 0.7500\n",
      "Epoch 12/30\n",
      "163/163 [==============================] - 119s 728ms/step - loss: 0.7376 - acc: 0.9592 - val_loss: 1.0356 - val_acc: 0.7500\n",
      "Epoch 13/30\n",
      "163/163 [==============================] - 118s 721ms/step - loss: 0.6948 - acc: 0.9599 - val_loss: 0.8794 - val_acc: 0.8750\n",
      "Epoch 14/30\n",
      "163/163 [==============================] - 114s 698ms/step - loss: 0.6488 - acc: 0.9645 - val_loss: 0.8045 - val_acc: 0.9375\n",
      "Epoch 15/30\n",
      "163/163 [==============================] - 114s 702ms/step - loss: 0.6113 - acc: 0.9655 - val_loss: 0.8320 - val_acc: 0.8125\n",
      "Epoch 16/30\n",
      "163/163 [==============================] - 119s 728ms/step - loss: 0.5803 - acc: 0.9647 - val_loss: 0.8951 - val_acc: 0.7500\n",
      "Epoch 17/30\n",
      "163/163 [==============================] - 117s 718ms/step - loss: 0.5422 - acc: 0.9680 - val_loss: 0.6613 - val_acc: 0.9375\n",
      "Epoch 18/30\n",
      "163/163 [==============================] - 112s 688ms/step - loss: 0.5161 - acc: 0.9678 - val_loss: 0.7795 - val_acc: 0.8125\n",
      "Epoch 19/30\n",
      "163/163 [==============================] - 120s 734ms/step - loss: 0.4864 - acc: 0.9684 - val_loss: 0.9870 - val_acc: 0.6875\n",
      "Epoch 20/30\n",
      "163/163 [==============================] - 117s 718ms/step - loss: 0.4561 - acc: 0.9724 - val_loss: 0.6442 - val_acc: 0.8125\n",
      "Epoch 21/30\n",
      "163/163 [==============================] - 115s 704ms/step - loss: 0.4314 - acc: 0.9730 - val_loss: 0.5412 - val_acc: 0.9375\n",
      "Epoch 22/30\n",
      "163/163 [==============================] - 115s 708ms/step - loss: 0.4070 - acc: 0.9734 - val_loss: 0.6057 - val_acc: 0.8125\n",
      "Epoch 23/30\n",
      "163/163 [==============================] - 117s 718ms/step - loss: 0.3824 - acc: 0.9760 - val_loss: 0.5321 - val_acc: 0.8750\n",
      "Epoch 24/30\n",
      "163/163 [==============================] - 116s 714ms/step - loss: 0.3684 - acc: 0.9735 - val_loss: 0.6225 - val_acc: 0.8125\n",
      "Epoch 25/30\n",
      "163/163 [==============================] - 113s 694ms/step - loss: 0.3465 - acc: 0.9739 - val_loss: 0.7169 - val_acc: 0.7500\n",
      "Epoch 26/30\n",
      "163/163 [==============================] - 118s 725ms/step - loss: 0.3242 - acc: 0.9772 - val_loss: 0.5543 - val_acc: 0.8125\n",
      "Epoch 27/30\n",
      "163/163 [==============================] - 135s 826ms/step - loss: 0.3085 - acc: 0.9770 - val_loss: 0.3572 - val_acc: 1.0000\n",
      "Epoch 28/30\n",
      "163/163 [==============================] - 146s 893ms/step - loss: 0.2954 - acc: 0.9785 - val_loss: 0.3909 - val_acc: 0.9375\n",
      "Epoch 29/30\n",
      "163/163 [==============================] - 155s 954ms/step - loss: 0.2795 - acc: 0.9799 - val_loss: 0.4656 - val_acc: 0.8750\n",
      "Epoch 30/30\n",
      "163/163 [==============================] - 142s 870ms/step - loss: 0.2662 - acc: 0.9793 - val_loss: 0.6807 - val_acc: 0.6875\n"
     ]
    }
   ],
   "source": [
    "#fit model\n",
    "history_2a = model_2a.fit(train_images,\n",
    "                    train_labels,\n",
    "                    epochs=30,\n",
    "                    batch_size=32,\n",
    "                    validation_data=(val_images, val_labels))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "163/163 [==============================] - 37s 226ms/step - loss: 0.2507 - acc: 0.9839\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.2507314383983612, 0.9838957190513611]"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_train_2a = model_2a.evaluate(train_images, train_labels)\n",
    "results_train_2a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20/20 [==============================] - 6s 286ms/step - loss: 1.3817 - acc: 0.7324\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[1.3816807270050049, 0.7323718070983887]"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_test_2a = model_2a.evaluate(test_images, test_labels)\n",
    "results_test_2a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "98% on the training set and 73% on the testing set. Surprisingly not that different"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model 3 - LeNet-5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "#instantiate the model\n",
    "model_3 = models.Sequential()\n",
    "\n",
    "#add layers\n",
    "model_3.add(layers.Conv2D(filters=6, kernel_size=(3, 3), activation='relu', input_shape=(128 ,128, 3)))\n",
    "model_3.add(layers.AveragePooling2D())\n",
    "\n",
    "model_3.add(layers.Conv2D(filters=16, kernel_size=(3, 3), activation='relu'))\n",
    "model_3.add(layers.AveragePooling2D())\n",
    "\n",
    "model_3.add(layers.Flatten())\n",
    "\n",
    "model_3.add(layers.Dense(units=120, activation='relu'))\n",
    "\n",
    "model_3.add(layers.Dense(units=84, activation='relu'))\n",
    "\n",
    "model_3.add(layers.Dense(units=1, activation = 'sigmoid'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "#compile layers\n",
    "model_3.compile(loss='binary_crossentropy',\n",
    "              optimizer=\"sgd\",\n",
    "              metrics=['acc'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "163/163 [==============================] - 38s 232ms/step - loss: 0.4403 - acc: 0.8075 - val_loss: 0.8984 - val_acc: 0.6250\n",
      "Epoch 2/30\n",
      "163/163 [==============================] - 40s 243ms/step - loss: 0.2625 - acc: 0.8928 - val_loss: 0.4572 - val_acc: 0.7500\n",
      "Epoch 3/30\n",
      "163/163 [==============================] - 35s 217ms/step - loss: 0.1947 - acc: 0.9202 - val_loss: 0.6468 - val_acc: 0.7500\n",
      "Epoch 4/30\n",
      "163/163 [==============================] - 36s 222ms/step - loss: 0.1711 - acc: 0.9321 - val_loss: 0.4701 - val_acc: 0.7500\n",
      "Epoch 5/30\n",
      "163/163 [==============================] - 34s 206ms/step - loss: 0.1553 - acc: 0.9404 - val_loss: 0.3268 - val_acc: 0.8750\n",
      "Epoch 6/30\n",
      "163/163 [==============================] - 33s 205ms/step - loss: 0.1462 - acc: 0.9454 - val_loss: 0.8558 - val_acc: 0.6250\n",
      "Epoch 7/30\n",
      "163/163 [==============================] - 40s 246ms/step - loss: 0.1428 - acc: 0.9450 - val_loss: 0.4651 - val_acc: 0.7500\n",
      "Epoch 8/30\n",
      "163/163 [==============================] - 44s 268ms/step - loss: 0.1342 - acc: 0.9457 - val_loss: 0.4899 - val_acc: 0.7500\n",
      "Epoch 9/30\n",
      "163/163 [==============================] - 51s 315ms/step - loss: 0.1294 - acc: 0.9525 - val_loss: 0.4451 - val_acc: 0.8125\n",
      "Epoch 10/30\n",
      "163/163 [==============================] - 42s 259ms/step - loss: 0.1264 - acc: 0.9498 - val_loss: 0.2712 - val_acc: 0.8750\n",
      "Epoch 11/30\n",
      "163/163 [==============================] - 43s 266ms/step - loss: 0.1227 - acc: 0.9551 - val_loss: 0.4620 - val_acc: 0.7500\n",
      "Epoch 12/30\n",
      "163/163 [==============================] - 39s 239ms/step - loss: 0.1127 - acc: 0.9572 - val_loss: 0.2385 - val_acc: 0.8750\n",
      "Epoch 13/30\n",
      "163/163 [==============================] - 43s 262ms/step - loss: 0.1185 - acc: 0.9565 - val_loss: 0.6824 - val_acc: 0.6875\n",
      "Epoch 14/30\n",
      "163/163 [==============================] - 35s 217ms/step - loss: 0.1142 - acc: 0.9567 - val_loss: 0.7446 - val_acc: 0.6875\n",
      "Epoch 15/30\n",
      "163/163 [==============================] - 35s 212ms/step - loss: 0.1104 - acc: 0.9565 - val_loss: 0.6665 - val_acc: 0.6875\n",
      "Epoch 16/30\n",
      "163/163 [==============================] - 41s 251ms/step - loss: 0.1027 - acc: 0.9601 - val_loss: 0.3274 - val_acc: 0.8750\n",
      "Epoch 17/30\n",
      "163/163 [==============================] - 36s 223ms/step - loss: 0.1045 - acc: 0.9595 - val_loss: 0.4404 - val_acc: 0.7500\n",
      "Epoch 18/30\n",
      "163/163 [==============================] - 35s 216ms/step - loss: 0.1042 - acc: 0.9599 - val_loss: 0.5643 - val_acc: 0.6875\n",
      "Epoch 19/30\n",
      "163/163 [==============================] - 35s 216ms/step - loss: 0.0985 - acc: 0.9599 - val_loss: 0.5717 - val_acc: 0.6875\n",
      "Epoch 20/30\n",
      "163/163 [==============================] - 33s 204ms/step - loss: 0.0971 - acc: 0.9622 - val_loss: 0.2298 - val_acc: 0.9375\n",
      "Epoch 21/30\n",
      "163/163 [==============================] - 38s 233ms/step - loss: 0.0989 - acc: 0.9649 - val_loss: 0.4579 - val_acc: 0.6875\n",
      "Epoch 22/30\n",
      "163/163 [==============================] - 38s 236ms/step - loss: 0.0923 - acc: 0.9643 - val_loss: 0.4739 - val_acc: 0.6875\n",
      "Epoch 23/30\n",
      "163/163 [==============================] - 34s 206ms/step - loss: 0.0899 - acc: 0.9676 - val_loss: 0.4551 - val_acc: 0.6875\n",
      "Epoch 24/30\n",
      "163/163 [==============================] - 32s 197ms/step - loss: 0.0866 - acc: 0.9659 - val_loss: 0.2980 - val_acc: 0.8125\n",
      "Epoch 25/30\n",
      "163/163 [==============================] - 33s 201ms/step - loss: 0.0831 - acc: 0.9682 - val_loss: 0.7782 - val_acc: 0.6875\n",
      "Epoch 26/30\n",
      "163/163 [==============================] - 34s 206ms/step - loss: 0.0808 - acc: 0.9682 - val_loss: 0.2574 - val_acc: 0.8750\n",
      "Epoch 27/30\n",
      "163/163 [==============================] - 33s 201ms/step - loss: 0.0889 - acc: 0.9672 - val_loss: 0.5124 - val_acc: 0.6875\n",
      "Epoch 28/30\n",
      "163/163 [==============================] - 34s 206ms/step - loss: 0.0769 - acc: 0.9739 - val_loss: 0.2723 - val_acc: 0.8125\n",
      "Epoch 29/30\n",
      "163/163 [==============================] - 33s 202ms/step - loss: 0.0795 - acc: 0.9703 - val_loss: 0.6039 - val_acc: 0.6875\n",
      "Epoch 30/30\n",
      "163/163 [==============================] - 32s 196ms/step - loss: 0.0743 - acc: 0.9701 - val_loss: 0.4380 - val_acc: 0.7500\n"
     ]
    }
   ],
   "source": [
    "#fit model\n",
    "history = model_3.fit(train_images,\n",
    "                    train_labels,\n",
    "                    epochs=30,\n",
    "                    batch_size=32,\n",
    "                    validation_data=(val_images, val_labels))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Look at train/test results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "163/163 [==============================] - 13s 82ms/step - loss: 0.0675 - acc: 0.9764\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.06748341023921967, 0.9764187335968018]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_train = model_3.evaluate(train_images, train_labels)\n",
    "results_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20/20 [==============================] - 3s 143ms/step - loss: 0.8526 - acc: 0.7853\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.8525822162628174, 0.7852563858032227]"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_test = model_3.evaluate(test_images, test_labels)\n",
    "results_test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "97% on the training set and 78% on the testing set. Ok so a little more of an improvement but can also use some regularization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Let's Try That Again With Some Regularization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "#instantiate the model\n",
    "model_3a = models.Sequential()\n",
    "\n",
    "#add layers\n",
    "model_3a.add(layers.Conv2D(filters=6, kernel_size=(3, 3), activation='relu', input_shape=(128 ,128, 3)))\n",
    "model_3a.add(layers.AveragePooling2D())\n",
    "\n",
    "model_3a.add(layers.Conv2D(filters=16, kernel_size=(3, 3), activation='relu'))\n",
    "model_3a.add(layers.AveragePooling2D())\n",
    "\n",
    "model_3a.add(layers.Flatten())\n",
    "\n",
    "model_3a.add(layers.Dense(units=120, activation='relu', kernel_regularizer=keras.regularizers.l2(l2=0.01)))\n",
    "model_3a.add(layers.Dropout(0.2))\n",
    "\n",
    "model_3a.add(layers.Dense(units=84, activation='relu', kernel_regularizer=keras.regularizers.l2(l2=0.01)))\n",
    "model_3a.add(layers.Dropout(0.2))\n",
    "\n",
    "model_3a.add(layers.Dense(units=1, activation = 'sigmoid'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "#compile layers\n",
    "model_3a.compile(loss='binary_crossentropy',\n",
    "              optimizer=\"sgd\",\n",
    "              metrics=['acc'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "163/163 [==============================] - 52s 319ms/step - loss: 3.7666 - acc: 0.7611 - val_loss: 3.6968 - val_acc: 0.7500\n",
      "Epoch 2/30\n",
      "163/163 [==============================] - 46s 282ms/step - loss: 3.3951 - acc: 0.8543 - val_loss: 3.7404 - val_acc: 0.6875\n",
      "Epoch 3/30\n",
      "163/163 [==============================] - 44s 272ms/step - loss: 3.1190 - acc: 0.9059 - val_loss: 3.1422 - val_acc: 0.8125\n",
      "Epoch 4/30\n",
      "163/163 [==============================] - 45s 275ms/step - loss: 2.8990 - acc: 0.9183 - val_loss: 3.4379 - val_acc: 0.5625\n",
      "Epoch 5/30\n",
      "163/163 [==============================] - 43s 266ms/step - loss: 2.7169 - acc: 0.9275 - val_loss: 3.3496 - val_acc: 0.6250\n",
      "Epoch 6/30\n",
      "163/163 [==============================] - 42s 259ms/step - loss: 2.5437 - acc: 0.9390 - val_loss: 2.7811 - val_acc: 0.7500\n",
      "Epoch 7/30\n",
      "163/163 [==============================] - 42s 257ms/step - loss: 2.3849 - acc: 0.9387 - val_loss: 2.7043 - val_acc: 0.7500\n",
      "Epoch 8/30\n",
      "163/163 [==============================] - 43s 263ms/step - loss: 2.2499 - acc: 0.9388 - val_loss: 2.5331 - val_acc: 0.8125\n",
      "Epoch 9/30\n",
      "163/163 [==============================] - 43s 265ms/step - loss: 2.1099 - acc: 0.9438 - val_loss: 2.3981 - val_acc: 0.8125\n",
      "Epoch 10/30\n",
      "163/163 [==============================] - 43s 265ms/step - loss: 1.9807 - acc: 0.9471 - val_loss: 2.4620 - val_acc: 0.6875\n",
      "Epoch 11/30\n",
      "163/163 [==============================] - 46s 285ms/step - loss: 1.8653 - acc: 0.9469 - val_loss: 2.0050 - val_acc: 0.8125\n",
      "Epoch 12/30\n",
      "163/163 [==============================] - 44s 270ms/step - loss: 1.7553 - acc: 0.9436 - val_loss: 2.0405 - val_acc: 0.8750\n",
      "Epoch 13/30\n",
      "163/163 [==============================] - 44s 271ms/step - loss: 1.6593 - acc: 0.9484 - val_loss: 2.0535 - val_acc: 0.7500\n",
      "Epoch 14/30\n",
      "163/163 [==============================] - 44s 269ms/step - loss: 1.5545 - acc: 0.9488 - val_loss: 1.8958 - val_acc: 0.7500\n",
      "Epoch 15/30\n",
      "163/163 [==============================] - 45s 273ms/step - loss: 1.4677 - acc: 0.9536 - val_loss: 1.9041 - val_acc: 0.7500\n",
      "Epoch 16/30\n",
      "163/163 [==============================] - 51s 311ms/step - loss: 1.3773 - acc: 0.9555 - val_loss: 1.7935 - val_acc: 0.7500\n",
      "Epoch 17/30\n",
      "163/163 [==============================] - 47s 288ms/step - loss: 1.3057 - acc: 0.9526 - val_loss: 2.1522 - val_acc: 0.6875\n",
      "Epoch 18/30\n",
      "163/163 [==============================] - 42s 256ms/step - loss: 1.2251 - acc: 0.9523 - val_loss: 1.6386 - val_acc: 0.7500\n",
      "Epoch 19/30\n",
      "163/163 [==============================] - 42s 256ms/step - loss: 1.1598 - acc: 0.9515 - val_loss: 1.5315 - val_acc: 0.7500\n",
      "Epoch 20/30\n",
      "163/163 [==============================] - 40s 247ms/step - loss: 1.0952 - acc: 0.9548 - val_loss: 1.5397 - val_acc: 0.8125\n",
      "Epoch 21/30\n",
      "163/163 [==============================] - 40s 247ms/step - loss: 1.0406 - acc: 0.9523 - val_loss: 1.8051 - val_acc: 0.6250\n",
      "Epoch 22/30\n",
      "163/163 [==============================] - 48s 296ms/step - loss: 0.9780 - acc: 0.9515 - val_loss: 1.3408 - val_acc: 0.7500\n",
      "Epoch 23/30\n",
      "163/163 [==============================] - 44s 270ms/step - loss: 0.9229 - acc: 0.9561 - val_loss: 1.3125 - val_acc: 0.7500\n",
      "Epoch 24/30\n",
      "163/163 [==============================] - 43s 265ms/step - loss: 0.8692 - acc: 0.9599 - val_loss: 1.3905 - val_acc: 0.6875\n",
      "Epoch 25/30\n",
      "163/163 [==============================] - 42s 255ms/step - loss: 0.8260 - acc: 0.9576 - val_loss: 1.4716 - val_acc: 0.6875\n",
      "Epoch 26/30\n",
      "163/163 [==============================] - 46s 279ms/step - loss: 0.7788 - acc: 0.9582 - val_loss: 1.5396 - val_acc: 0.5625\n",
      "Epoch 27/30\n",
      "163/163 [==============================] - 40s 248ms/step - loss: 0.7429 - acc: 0.9576 - val_loss: 0.9290 - val_acc: 0.8125\n",
      "Epoch 28/30\n",
      "163/163 [==============================] - 48s 292ms/step - loss: 0.6975 - acc: 0.9582 - val_loss: 1.3083 - val_acc: 0.6250\n",
      "Epoch 29/30\n",
      "163/163 [==============================] - 40s 246ms/step - loss: 0.6646 - acc: 0.9611 - val_loss: 1.2298 - val_acc: 0.6875\n",
      "Epoch 30/30\n",
      "163/163 [==============================] - 39s 241ms/step - loss: 0.6332 - acc: 0.9607 - val_loss: 1.1119 - val_acc: 0.6875\n"
     ]
    }
   ],
   "source": [
    "#fit model\n",
    "history_3a = model_3a.fit(train_images,\n",
    "                    train_labels,\n",
    "                    epochs=30,\n",
    "                    batch_size=32,\n",
    "                    validation_data=(val_images, val_labels))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "163/163 [==============================] - 15s 92ms/step - loss: 0.5974 - acc: 0.9670\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.5973795056343079, 0.967024564743042]"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_train_3a = model_3a.evaluate(train_images, train_labels)\n",
    "results_train_3a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20/20 [==============================] - 3s 161ms/step - loss: 1.2186 - acc: 0.7933\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[1.2185906171798706, 0.7932692170143127]"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_test_3a = model_3a.evaluate(test_images, test_labels)\n",
    "results_test_3a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "96% on the training set and 79% on the testing set. Our best model so far!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model 4 - AlexNet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "#instantiate model\n",
    "model_4 = models.Sequential()\n",
    "\n",
    "#add layers\n",
    "model_4.add(layers.Conv2D(filters=96, kernel_size=(11,11), strides=(4,4), activation='relu', input_shape=(128 ,128, 3)))\n",
    "model_4.add(layers.BatchNormalization())\n",
    "          \n",
    "model_4.add(layers.MaxPool2D(pool_size=(3,3), strides=(2,2)))\n",
    "model_4.add(layers.Conv2D(filters=256, kernel_size=(5,5), strides=(1,1), activation='relu', padding=\"same\"))\n",
    "model_4.add(layers.BatchNormalization())\n",
    "          \n",
    "model_4.add(layers.MaxPool2D(pool_size=(3,3), strides=(2,2)))\n",
    "model_4.add(layers.Conv2D(filters=384, kernel_size=(3,3), strides=(1,1), activation='relu', padding=\"same\"))\n",
    "model_4.add(layers.BatchNormalization())\n",
    "          \n",
    "model_4.add(layers.Conv2D(filters=384, kernel_size=(3,3), strides=(1,1), activation='relu', padding=\"same\"))\n",
    "model_4.add(layers.BatchNormalization())\n",
    "model_4.add(layers.Conv2D(filters=256, kernel_size=(3,3), strides=(1,1), activation='relu', padding=\"same\"))\n",
    "model_4.add(layers.BatchNormalization())\n",
    "model_4.add(layers.MaxPool2D(pool_size=(2,2), strides=(2,2))) \n",
    "          \n",
    "model_4.add(layers.Flatten())\n",
    "model_4.add(layers.Dense(4096, activation='relu'))\n",
    "model_4.add(layers.Dropout(0.5))\n",
    "model_4.add(layers.Dense(4096, activation='relu'))\n",
    "model_4.add(layers.Dropout(0.5))\n",
    "model_4.add(layers.Dense(1, activation='sigmoid')) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "#compile layers\n",
    "model_4.compile(loss='binary_crossentropy',\n",
    "              optimizer=\"sgd\",\n",
    "              metrics=['acc'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "163/163 [==============================] - 296s 2s/step - loss: 0.3704 - acc: 0.8815 - val_loss: 1.8633 - val_acc: 0.5000\n",
      "Epoch 2/30\n",
      "163/163 [==============================] - 286s 2s/step - loss: 0.1575 - acc: 0.9411 - val_loss: 4.4250 - val_acc: 0.5000\n",
      "Epoch 3/30\n",
      "163/163 [==============================] - 233s 1s/step - loss: 0.1217 - acc: 0.9555 - val_loss: 1.3273 - val_acc: 0.5000\n",
      "Epoch 4/30\n",
      "163/163 [==============================] - 227s 1s/step - loss: 0.0966 - acc: 0.9615 - val_loss: 2.5942 - val_acc: 0.6250\n",
      "Epoch 5/30\n",
      "163/163 [==============================] - 238s 1s/step - loss: 0.0744 - acc: 0.9711 - val_loss: 3.3825 - val_acc: 0.5000\n",
      "Epoch 6/30\n",
      "163/163 [==============================] - 344s 2s/step - loss: 0.0674 - acc: 0.9760 - val_loss: 2.1356 - val_acc: 0.5625\n",
      "Epoch 7/30\n",
      "163/163 [==============================] - 283s 2s/step - loss: 0.0608 - acc: 0.9758 - val_loss: 4.5163 - val_acc: 0.5000\n",
      "Epoch 8/30\n",
      "163/163 [==============================] - 237s 1s/step - loss: 0.0514 - acc: 0.9818 - val_loss: 0.1593 - val_acc: 0.8750\n",
      "Epoch 9/30\n",
      "163/163 [==============================] - 229s 1s/step - loss: 0.0513 - acc: 0.9781 - val_loss: 1.6779 - val_acc: 0.5000\n",
      "Epoch 10/30\n",
      "163/163 [==============================] - 234s 1s/step - loss: 0.0463 - acc: 0.9808 - val_loss: 4.3947 - val_acc: 0.5000\n",
      "Epoch 11/30\n",
      "163/163 [==============================] - 258s 2s/step - loss: 0.0396 - acc: 0.9843 - val_loss: 1.3591 - val_acc: 0.6875\n",
      "Epoch 12/30\n",
      "163/163 [==============================] - 249s 2s/step - loss: 0.0321 - acc: 0.9875 - val_loss: 0.4620 - val_acc: 0.8125\n",
      "Epoch 13/30\n",
      "163/163 [==============================] - 268s 2s/step - loss: 0.0264 - acc: 0.9893 - val_loss: 2.4387 - val_acc: 0.5625\n",
      "Epoch 14/30\n",
      "163/163 [==============================] - 264s 2s/step - loss: 0.0193 - acc: 0.9931 - val_loss: 3.0455 - val_acc: 0.5625\n",
      "Epoch 15/30\n",
      "163/163 [==============================] - 278s 2s/step - loss: 0.0297 - acc: 0.9879 - val_loss: 0.6985 - val_acc: 0.8125\n",
      "Epoch 16/30\n",
      "163/163 [==============================] - 284s 2s/step - loss: 0.0187 - acc: 0.9925 - val_loss: 0.9037 - val_acc: 0.6250\n",
      "Epoch 17/30\n",
      "163/163 [==============================] - 288s 2s/step - loss: 0.0217 - acc: 0.9927 - val_loss: 0.2175 - val_acc: 0.8750\n",
      "Epoch 18/30\n",
      "163/163 [==============================] - 292s 2s/step - loss: 0.0212 - acc: 0.9919 - val_loss: 0.2842 - val_acc: 0.8750\n",
      "Epoch 19/30\n",
      "163/163 [==============================] - 297s 2s/step - loss: 0.0125 - acc: 0.9962 - val_loss: 0.5981 - val_acc: 0.7500\n",
      "Epoch 20/30\n",
      "163/163 [==============================] - 302s 2s/step - loss: 0.0050 - acc: 0.9985 - val_loss: 0.7080 - val_acc: 0.8750\n",
      "Epoch 21/30\n",
      "163/163 [==============================] - 304s 2s/step - loss: 0.0035 - acc: 0.9988 - val_loss: 0.1975 - val_acc: 0.9375\n",
      "Epoch 22/30\n",
      "163/163 [==============================] - 295s 2s/step - loss: 0.0024 - acc: 0.9992 - val_loss: 0.0406 - val_acc: 1.0000\n",
      "Epoch 23/30\n",
      "163/163 [==============================] - 298s 2s/step - loss: 0.0051 - acc: 0.9987 - val_loss: 0.3975 - val_acc: 0.8750\n",
      "Epoch 24/30\n",
      "163/163 [==============================] - 315s 2s/step - loss: 8.8409e-04 - acc: 1.0000 - val_loss: 0.3660 - val_acc: 0.8750\n",
      "Epoch 25/30\n",
      "163/163 [==============================] - 301s 2s/step - loss: 6.2939e-04 - acc: 1.0000 - val_loss: 0.4216 - val_acc: 0.8750\n",
      "Epoch 26/30\n",
      "163/163 [==============================] - 300s 2s/step - loss: 0.0013 - acc: 0.9994 - val_loss: 0.1479 - val_acc: 0.9375\n",
      "Epoch 27/30\n",
      "163/163 [==============================] - 302s 2s/step - loss: 3.2076e-04 - acc: 1.0000 - val_loss: 0.1518 - val_acc: 0.9375\n",
      "Epoch 28/30\n",
      "163/163 [==============================] - 306s 2s/step - loss: 6.2078e-04 - acc: 0.9998 - val_loss: 0.7458 - val_acc: 0.6875\n",
      "Epoch 29/30\n",
      "163/163 [==============================] - 301s 2s/step - loss: 4.5827e-04 - acc: 1.0000 - val_loss: 0.2185 - val_acc: 0.9375\n",
      "Epoch 30/30\n",
      "163/163 [==============================] - 300s 2s/step - loss: 2.8932e-04 - acc: 1.0000 - val_loss: 0.1684 - val_acc: 0.9375\n"
     ]
    }
   ],
   "source": [
    "#fit model\n",
    "history = model_4.fit(train_images,\n",
    "                    train_labels,\n",
    "                    epochs=30,\n",
    "                    batch_size=32,\n",
    "                    validation_data=(val_images, val_labels))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's look at train/test results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "163/163 [==============================] - 72s 444ms/step - loss: 7.6233e-05 - acc: 1.0000\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[7.623287820024416e-05, 1.0]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_train = model_4.evaluate(train_images, train_labels)\n",
    "results_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20/20 [==============================] - 11s 573ms/step - loss: 2.1633 - acc: 0.7644\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[2.1632630825042725, 0.7644230723381042]"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_test = model_4.evaluate(test_images, test_labels)\n",
    "results_test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "100% on the training set and 76% on the testing set. OK...let see if some regularization can help us"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Let's Try That Again With Some Regularization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "#instantiate model\n",
    "model_4a = models.Sequential()\n",
    "\n",
    "#add layers\n",
    "model_4a.add(layers.Conv2D(filters=96, kernel_size=(11,11), strides=(4,4), activation='relu', input_shape=(128 ,128, 3)))\n",
    "model_4a.add(layers.BatchNormalization())\n",
    "          \n",
    "model_4a.add(layers.MaxPool2D(pool_size=(3,3), strides=(2,2)))\n",
    "model_4a.add(layers.Conv2D(filters=256, kernel_size=(5,5), strides=(1,1), activation='relu', padding=\"same\"))\n",
    "model_4a.add(layers.BatchNormalization())\n",
    "          \n",
    "model_4a.add(layers.MaxPool2D(pool_size=(3,3), strides=(2,2)))\n",
    "model_4a.add(layers.Conv2D(filters=384, kernel_size=(3,3), strides=(1,1), activation='relu', padding=\"same\"))\n",
    "model_4a.add(layers.BatchNormalization())\n",
    "          \n",
    "model_4a.add(layers.Conv2D(filters=384, kernel_size=(3,3), strides=(1,1), activation='relu', padding=\"same\"))\n",
    "model_4a.add(layers.BatchNormalization())\n",
    "model_4a.add(layers.Conv2D(filters=256, kernel_size=(3,3), strides=(1,1), activation='relu', padding=\"same\"))\n",
    "model_4a.add(layers.BatchNormalization())\n",
    "model_4a.add(layers.MaxPool2D(pool_size=(2,2), strides=(2,2))) \n",
    "          \n",
    "model_4a.add(layers.Flatten())\n",
    "model_4a.add(layers.Dense(4096, activation='relu', kernel_regularizer=keras.regularizers.l2(l2=0.01)))\n",
    "model_4a.add(layers.Dropout(0.2))\n",
    "model_4a.add(layers.Dense(4096, activation='relu', kernel_regularizer=keras.regularizers.l2(l2=0.01)))\n",
    "model_4a.add(layers.Dropout(0.2))\n",
    "model_4a.add(layers.Dense(1, activation='sigmoid')) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "#compile layers\n",
    "model_4a.compile(loss='binary_crossentropy',\n",
    "              optimizer=\"sgd\",\n",
    "              metrics=['acc'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "163/163 [==============================] - 250s 2s/step - loss: 68.4814 - acc: 0.9062 - val_loss: 67.8517 - val_acc: 0.5000\n",
      "Epoch 2/30\n",
      "163/163 [==============================] - 274s 2s/step - loss: 64.0295 - acc: 0.9509 - val_loss: 63.8802 - val_acc: 0.5000\n",
      "Epoch 3/30\n",
      "163/163 [==============================] - 261s 2s/step - loss: 59.9751 - acc: 0.9607 - val_loss: 60.3797 - val_acc: 0.5625\n",
      "Epoch 4/30\n",
      "163/163 [==============================] - 255s 2s/step - loss: 56.1645 - acc: 0.9747 - val_loss: 56.6032 - val_acc: 0.6250\n",
      "Epoch 5/30\n",
      "163/163 [==============================] - 284s 2s/step - loss: 52.6229 - acc: 0.9758 - val_loss: 51.7381 - val_acc: 0.5625\n",
      "Epoch 6/30\n",
      "163/163 [==============================] - 278s 2s/step - loss: 49.2926 - acc: 0.9787 - val_loss: 50.8723 - val_acc: 0.5000\n",
      "Epoch 7/30\n",
      "163/163 [==============================] - 481s 3s/step - loss: 46.1766 - acc: 0.9826 - val_loss: 46.0608 - val_acc: 0.5000\n",
      "Epoch 8/30\n",
      "163/163 [==============================] - 486s 3s/step - loss: 43.2519 - acc: 0.9881 - val_loss: 43.5289 - val_acc: 0.5000\n",
      "Epoch 9/30\n",
      "163/163 [==============================] - 400s 2s/step - loss: 40.5250 - acc: 0.9883 - val_loss: 40.2817 - val_acc: 0.6250\n",
      "Epoch 10/30\n",
      "163/163 [==============================] - 346s 2s/step - loss: 37.9680 - acc: 0.9873 - val_loss: 37.4142 - val_acc: 0.8125\n",
      "Epoch 11/30\n",
      "163/163 [==============================] - 428s 3s/step - loss: 35.5673 - acc: 0.9900 - val_loss: 34.9920 - val_acc: 0.7500\n",
      "Epoch 12/30\n",
      "163/163 [==============================] - 331s 2s/step - loss: 33.3101 - acc: 0.9981 - val_loss: 32.7623 - val_acc: 0.8125\n",
      "Epoch 13/30\n",
      "163/163 [==============================] - 307s 2s/step - loss: 31.2074 - acc: 0.9971 - val_loss: 30.3186 - val_acc: 1.0000\n",
      "Epoch 14/30\n",
      "163/163 [==============================] - 291s 2s/step - loss: 29.2348 - acc: 0.9992 - val_loss: 29.5457 - val_acc: 0.7500\n",
      "Epoch 15/30\n",
      "163/163 [==============================] - 276s 2s/step - loss: 27.3888 - acc: 0.9998 - val_loss: 27.0735 - val_acc: 0.8125\n",
      "Epoch 16/30\n",
      "163/163 [==============================] - 387s 2s/step - loss: 25.6597 - acc: 0.9998 - val_loss: 25.0565 - val_acc: 0.9375\n",
      "Epoch 17/30\n",
      "163/163 [==============================] - 496s 3s/step - loss: 24.0403 - acc: 1.0000 - val_loss: 23.5710 - val_acc: 0.8750\n",
      "Epoch 18/30\n",
      " 43/163 [======>.......................] - ETA: 5:35 - loss: 23.0656 - acc: 1.0000"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-98-fd031034eafe>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#fit model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m history_4a = model_4a.fit(train_images,\n\u001b[0m\u001b[1;32m      3\u001b[0m                     \u001b[0mtrain_labels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m                     \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m30\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m                     \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/envs/learn-env/lib/python3.8/site-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36m_method_wrapper\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    106\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_method_wrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    107\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_in_multi_worker_mode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 108\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    109\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    110\u001b[0m     \u001b[0;31m# Running inside `run_distribute_coordinator` already.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/envs/learn-env/lib/python3.8/site-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1096\u001b[0m                 batch_size=batch_size):\n\u001b[1;32m   1097\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1098\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1099\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1100\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/envs/learn-env/lib/python3.8/site-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    778\u001b[0m       \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    779\u001b[0m         \u001b[0mcompiler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"nonXla\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 780\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    781\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    782\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/envs/learn-env/lib/python3.8/site-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    805\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    806\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 807\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    808\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    809\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/envs/learn-env/lib/python3.8/site-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2827\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2828\u001b[0m       \u001b[0mgraph_function\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_define_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2829\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mgraph_function\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_filtered_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2830\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2831\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/envs/learn-env/lib/python3.8/site-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_filtered_call\u001b[0;34m(self, args, kwargs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1841\u001b[0m       \u001b[0;31m`\u001b[0m\u001b[0margs\u001b[0m\u001b[0;31m`\u001b[0m \u001b[0;32mand\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1842\u001b[0m     \"\"\"\n\u001b[0;32m-> 1843\u001b[0;31m     return self._call_flat(\n\u001b[0m\u001b[1;32m   1844\u001b[0m         [t for t in nest.flatten((args, kwargs), expand_composites=True)\n\u001b[1;32m   1845\u001b[0m          if isinstance(t, (ops.Tensor,\n",
      "\u001b[0;32m~/opt/anaconda3/envs/learn-env/lib/python3.8/site-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1921\u001b[0m         and executing_eagerly):\n\u001b[1;32m   1922\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1923\u001b[0;31m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0m\u001b[1;32m   1924\u001b[0m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[1;32m   1925\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n",
      "\u001b[0;32m~/opt/anaconda3/envs/learn-env/lib/python3.8/site-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    543\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0m_InterpolateFunctionError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    544\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcancellation_manager\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 545\u001b[0;31m           outputs = execute.execute(\n\u001b[0m\u001b[1;32m    546\u001b[0m               \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    547\u001b[0m               \u001b[0mnum_outputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_outputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/envs/learn-env/lib/python3.8/site-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     57\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     60\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "#fit model\n",
    "history_4a = model_4a.fit(train_images,\n",
    "                    train_labels,\n",
    "                    epochs=30,\n",
    "                    batch_size=32,\n",
    "                    validation_data=(val_images, val_labels))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "results_train_4a = model_4a.evaluate(train_images, train_labels)\n",
    "results_train_4a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "results_test_4a = model_4a.evaluate(test_images, test_labels)\n",
    "results_test_4a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our regularized LeNet-5 model was the highest performing model with a 96% accuracy on the training set and 79% accuracy on the testing set. We would recommend using this model to detect pneumonia in the X-Rays of children but also believe that given time, we can make a significantly better model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "learn-env",
   "language": "python",
   "name": "learn-env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
